
lua_shared_dict lsd 10m;


upstream okr_server_go {
#    server 172.16.90.7:50010    max_fails=2 fail_timeout=30s;
 #   server 172.16.90.8:50010    max_fails=2 fail_timeout=30s;
    server 127.0.0.1:50010       max_fails=2 fail_timeout=30s;
}
upstream okr_server_perm{
#  server 172.16.90.7:49999    max_fails=2 fail_timeout=30s;
 #  server 172.16.90.8:49999    max_fails=2 fail_timeout=30s;
    server 127.0.0.1:7001       max_fails=2 fail_timeout=30s;
}
upstream okr_server_perm_third{
    server 127.0.0.1:50011       max_fails=2 fail_timeout=30s;
}

server {
    listen 8090;
    server_name okr.loc;

    access_log logs/access.okr.loc.log;
    error_log  logs/error.okr.loc.log warn;

    root /tmp;

    index index.php index.html index.htm;
    lua_code_cache off;

    location /okr-server/proxy { 
        content_by_lua_block {
            local lsd = ngx.shared.lsd
            for i, v in ipairs(lsd:get_keys(50)) do
                ngx.say("index:", i, " value: ", v)
            end
        }
    }  
    location /okr-server/updateproxy { 
        content_by_lua_block {
           local lsd = ngx.shared.lsd
           ngx.req.read_body()
        --    local arg = ngx.req.get_post_args()
        --    for k,v in pairs(arg) do
        --        ngx.say("[POST] key:", k, " v:", v)
        --    end

            local cjson = require "cjson.safe"
            ngx.req.read_body()
            local body_str = ngx.req.get_body_data()
            if not body_str then
                ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
            local value, err = cjson.decode(body_str)
            if not value then
                local value = ngx.req.get_post_args()
                -- value now is table 
                ngx.say("body is post data")
            else
                ngx.say("body is post json")
            end
            lsd:flush_all()
            for i, v in ipairs(value["urls"]) do
                local key = v["url"]..v["method"]
                ngx.say(i , " " ,key)
                lsd:set( key , 1)
            end
        }
    }  
    location /okr-server {
        set $target '';
        rewrite_by_lua  '
            local request_method    = ngx.var.request_method
            local uri               = ngx.re.sub(ngx.var.uri, "^/okr-server(.*)", "$1", "")
            ngx.req.set_uri(uri)
            
            local lsd               = ngx.shared.lsd
            local key               = uri..request_method
            local uri_check         = lsd:get( key )
            if uri_check == 1 then
                ngx.var.target      = "okr_server_go"
            else
                ngx.var.target      = "okr_server_perm"
            end
            -- ngx.say(ngx.var.target ," ", uri, " ", uri_check , "  " ,key )
            ngx.header["proxy_host"]= ngx.var.target
            ngx.header["proxy_uri"] = uri
            ngx.header["proxy_uri_check"] = uri_check
            ngx.header["proxy_key"] = key
        ';
        
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        proxy_set_header Host $host;
        proxy_set_header X-Nginx-Proxy true;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header REMOTE-HOST $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://$target$uri;
    }

    location /hello { 
        content_by_lua_block {
           local arg = ngx.req.get_uri_args()
           for k,v in pairs(arg) do
               ngx.say("[GET ] key:", k, " v:", v)
           end

           ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
           local arg = ngx.req.get_post_args()
           for k,v in pairs(arg) do
               ngx.say("[POST] key:", k, " v:", v)
           end

           ngx.say(ngx.var.document_uri)
        }
    }  
    
}
